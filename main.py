from logic import *
from config import *
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telebot import types
import time

bot = TeleBot(TOKEN)
hideBoard = types.ReplyKeyboardRemove() 


cancel_button = "–û—Ç–º–µ–Ω–∞ üö´"
def no_results(message):
    bot.send_message(message.chat.id, '–¢—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç!\n–ú–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –µ–≥–æ —Å –ø–æ–º–æ—à—å—é –∫–æ–º–∞–Ω–¥—ã /complete_test')

def gen_inline_markup(rows):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    for row in rows:
        markup.add(InlineKeyboardButton(row, callback_data=row))
    return markup

def gen_markup(rows):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.row_width = 1
    for row in rows:
        markup.add(KeyboardButton(row))
    markup.add(KeyboardButton(cancel_button))
    return markup

attributes_of_projects = {'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : ["–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", "user_name"],
                          "–û—Ç–≤–µ—Ç –Ω–∞ 1 –≤–æ–ø—Ä–æ—Å" : ["–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏?", "question1"],
                          "–û—Ç–≤–µ—Ç –Ω–∞ 2 –≤–æ–ø—Ä–æ—Å" : ["", "question2"],
                          "–û—Ç–≤–µ—Ç –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å" : ["", "question3"],
                          "1 –≤—ã–±–æ—Ä" : ["–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", "quiz1"],
                          "2 –≤—ã–±–æ—Ä" : ["–° —á–µ–º –±–æ–ª—å—à–µ –ª—é–±–∏—à—å —Ä–∞–±–æ—Ç–∞—Ç—å?", "quiz2"],
                          "3 –≤—ã–±–æ—Ä" : ["–•–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å —á–µ–≥–æ —Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –≤ –∂–∏–∑–Ω–∏?", "quiz3"]} #–¥–æ—Ä–∞–±–æ—Ç–∫–∞

def info_project(message, user_id, project_name): 
    info = manager.get_project_info(user_id, project_name)[0]
    bot.send_message(message.chat.id, f"""User name: {info[0]}
Question 1: {info[1]}
Question 2: {info[2]}
Question 3: {info[3]}
Quiz 1: {info[4]}
Quiz 2: {info[5]}
Quiz 3: {info[6]}
""")

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, """–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–æ–≤–µ—Ç—á–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É –∫–∞—Ä—å–µ—Ä—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
–ü–æ–º–æ–≥—É –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ!) 
""")
    info(message)

@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id,
"""
–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å:

/complete_test - –ø—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –Ω–∞ —Ç–æ, –∫–∞–∫–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
/results - —É–∑–Ω–∞–π –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞

–¢–∞–∫–∂–µ –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∞—è —Ç—ã –ª–∏—á–Ω–æ—Å—Ç—å!""")
    
@bot.message_handler(commands=['complete_test'])
def addtask_command(message):
    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É, —Å–∫–∞–∂–∏ –º–Ω–µ, –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    bot.register_next_step_handler(message, name_user)

def name_user(message):
    name = message.text
    user_id = message.from_user.id
    data = [user_id, name]
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ! –ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏?")
    bot.register_next_step_handler(message, save_answer1, data=data)

def save_answer1(message, data):
    data.append(message.text)
    bot.send_message(message.chat.id, "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ç–µ–±–µ –∫–∞–∂—É—Ç—Å—è –ª—ë–≥–∫–∏–º–∏, —Ö–æ—Ç—è –¥—Ä—É–≥–∏–º –æ–Ω–∏ –¥–∞—é—Ç—Å—è —Å —Ç—Ä—É–¥–æ–º??") 
    bot.register_next_step_handler(message, save_answer2, data=data)

def save_answer2(message, data):
    data.append(message.text)
    bot.send_message(message.chat.id, "–û–≥–æ! –ê –∫–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, ?") #–¥–æ—Ä–∞–±–æ—Ç–∫–∞
    bot.register_next_step_handler(message, save_answer3, data=data)

def save_answer3(message, data): 
    data.append(message.text)
    quiz1 = [x[0] for x in manager.get_quiz1()] 
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:", reply_markup=gen_markup(quiz1))
    bot.register_next_step_handler(message, callback_quiz1, data=data, quiz1=quiz1)

def callback_quiz1(message, data, quiz1): 
    quiz1_answ = message.text
    if message.text == cancel_button:
        no_results(message)
        return
    if quiz1_answ not in quiz1:
        bot.send_message(message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª –æ—Ç–≤–µ—Ç –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=gen_markup(quiz1))
        bot.register_next_step_handler(message, callback_quiz1, data=data, quiz1=quiz1)
        return
    quiz1_id = manager.get_quiz1_id(quiz1_answ)
    data.append(quiz1_id)
    quiz2 = [x[0] for x in manager.get_quiz2()] 
    bot.send_message(message.chat.id, "–ê —Ç—ã –±–æ–ª—å—à–µ –ª—é–±–∏—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–¥—å–º–∏, —Å –∏–¥–µ—è–º–∏, —Å —Ç–µ—Ö–Ω–∏–∫–æ–π –∏–ª–∏ —Å –¥–∞–Ω–Ω—ã–º–∏?", reply_markup=gen_markup(quiz2))
    bot.register_next_step_handler(message, callback_quiz2, data=data, quiz2=quiz2)

def callback_quiz2(message, data, quiz2): 
    quiz2_answ = message.text
    if message.text == cancel_button:
        no_results(message)
        return
    if quiz2_answ not in quiz2:
        bot.send_message(message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª –æ—Ç–≤–µ—Ç –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=gen_markup(quiz2))
        bot.register_next_step_handler(message, callback_quiz2, data=data, quiz2=quiz2)
        return
    quiz2_id = manager.get_quiz2_id(quiz2_answ)
    data.append(quiz2_id)
    quiz3 = [x[0] for x in manager.get_quiz3()] 
    bot.send_message(message.chat.id, "–ò –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–∫, —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ –º–∏—Ä–µ –∏–ª–∏ –æ–±—â–µ—Å—Ç–≤–µ —Å–≤–æ–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π?", reply_markup=gen_markup(quiz3))
    bot.register_next_step_handler(message, callback_quiz3, data=data, quiz3=quiz3)

def callback_quiz3(message, data, quiz3): 
    quiz3_answ = message.text
    if message.text == cancel_button:
        no_results(message)
        return
    if quiz3_answ not in quiz3:
        bot.send_message(message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª –æ—Ç–≤–µ—Ç –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=gen_markup(quiz3))
        bot.register_next_step_handler(message, callback_quiz3, data=data, quiz3=quiz3)
        return
    quiz3_id = manager.get_quiz3_id(quiz3_answ)
    data.append(quiz3_id)
    manager.insert_result([tuple(data)])
    bot.send_message(message.chat.id, "–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö –ø–æ –∫–æ–º–º–∞–Ω–¥–µ /results!")

@bot.message_handler(commands=['results'])
def results(message):
    results = manager.get_results(message.chat.id)
    if results:
        bot.send_message(message.chat.id, "–ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    else:
        no_results(message)

#–¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

if __name__ == '__main__':
    manager = DB_Manager(DATABASE)
    bot.infinity_polling()

